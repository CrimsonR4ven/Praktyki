// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColeslawData.Migrations
{
    [DbContext(typeof(GpuContext))]
    [Migration("20230113085547_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessPartner", b =>
                {
                    b.Property<int>("BusinessPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessPartnerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessPartnerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FK_BusinessPartner_WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("BusinessPartnerId");

                    b.HasIndex("FK_BusinessPartner_WarehouseId");

                    b.HasIndex("Name");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("BusinessPartnerType", b =>
                {
                    b.Property<int>("BusinessPartnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessPartnerTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("BusinessPartnerTypeId");

                    b.HasIndex("Name");

                    b.ToTable("BusinessPartnerTypes");
                });

            modelBuilder.Entity("DocType", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DocTypeId");

                    b.HasIndex("Name");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FK_Document_BusinessPartnerId")
                        .HasColumnType("int");

                    b.Property<int>("FK_Document_DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FK_Document_GpuId")
                        .HasColumnType("int");

                    b.Property<int>("FK_Document_WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("GpuId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("FK_Document_BusinessPartnerId");

                    b.HasIndex("FK_Document_DocTypeId");

                    b.HasIndex("FK_Document_GpuId");

                    b.HasIndex("FK_Document_WarehouseId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Gpu", b =>
                {
                    b.Property<int>("GpuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GpuId"));

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("GpuId");

                    b.HasIndex("Make", "Model")
                        .IsUnique();

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("GpuStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_GpuStatus_GpuId")
                        .HasColumnType("int");

                    b.Property<int>("FK_GpuStatus_WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("GpuId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_GpuStatus_GpuId");

                    b.HasIndex("FK_GpuStatus_WarehouseId");

                    b.ToTable("GpuStatuses");
                });

            modelBuilder.Entity("Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("City");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("BusinessPartner", b =>
                {
                    b.HasOne("BusinessPartnerType", "Type")
                        .WithMany()
                        .HasForeignKey("FK_BusinessPartner_WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Document", b =>
                {
                    b.HasOne("BusinessPartner", "BusinessPartner")
                        .WithMany()
                        .HasForeignKey("FK_Document_BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocType", "DocType")
                        .WithMany()
                        .HasForeignKey("FK_Document_DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gpu", "Gpu")
                        .WithMany()
                        .HasForeignKey("FK_Document_GpuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("FK_Document_WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessPartner");

                    b.Navigation("DocType");

                    b.Navigation("Gpu");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GpuStatus", b =>
                {
                    b.HasOne("Gpu", "Gpu")
                        .WithMany("GpuStatuses")
                        .HasForeignKey("FK_GpuStatus_GpuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse", "Warehouse")
                        .WithMany("GpuStatuses")
                        .HasForeignKey("FK_GpuStatus_WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gpu");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Gpu", b =>
                {
                    b.Navigation("GpuStatuses");
                });

            modelBuilder.Entity("Warehouse", b =>
                {
                    b.Navigation("GpuStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
